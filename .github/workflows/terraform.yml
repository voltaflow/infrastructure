name: "Terraform Infrastructure Deployment"

on:
  push:
    branches: [ main ]
    paths:
      - 'terraform/modules/**'
      - 'terraform/environments/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'terraform/modules/**'
      - 'terraform/environments/**'
  workflow_dispatch:
    # Solo se ejecutar치 en el entorno de producci칩n
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: false
        default: 'prod'
        type: choice
        options:
          - prod

jobs:
  terraform_fmt:
    name: "Terraform Format"
    uses: ./.github/workflows/terraform-fmt.yml
    with:
      working_directory: './terraform'

  terraform_plan:
    name: "Terraform Plan (Remote Execution via Terraform Cloud)"
    needs: terraform_fmt
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
          cli_config_credentials_token: ${{ secrets.TERRAFORM_CLOUD_TOKEN }}
      
      - name: Terraform Init
        run: terraform -chdir=terraform/environments/prod init -input=false
      
      - name: Create Plan Output Directory
        if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
        run: mkdir -p plan_output
      
      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
        run: |
          # Ejecuta plan; se delega la ejecuci칩n remota en Terraform Cloud
          terraform -chdir=terraform/environments/prod plan -input=false -no-color -out=${GITHUB_WORKSPACE}/plan.tfplan
          # Captura el plan en formato JSON usando una ruta absoluta
          terraform -chdir=terraform/environments/prod show -json ${GITHUB_WORKSPACE}/plan.tfplan > ${GITHUB_WORKSPACE}/plan_output/plan.json
        continue-on-error: true
      
      - name: Generate Human-Readable Plan
        if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
        run: terraform -chdir=terraform/environments/prod show -no-color ${GITHUB_WORKSPACE}/plan.tfplan > ${GITHUB_WORKSPACE}/plan_output/plan.txt

      - name: Send Plan to Deepseek
        if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
        run: |
          curl -X POST https://deepseek.internal/api/plans -H "Content-Type: application/json" -d @plan_output/plan.json || echo "Failed to send plan to Deepseek"

      - name: Analyze Plan with DeepSeek
        env:
          DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
        run: |
          pip install requests
          python - <<'EOF'
            import os, json, requests
            with open('plan_output/plan.json', 'r') as f:
                plan_content = f.read()

            payload = {
                "model": "deepseek-chat",
                "messages": [
                    {"role": "system", "content": "Eres un asistente DevOps que resume planes de Terraform."},
                    {"role": "user", "content": f"A continuaci칩n se muestra un plan de Terraform en formato JSON. Resume en espa침ol los recursos a crear, modificar o destruir:\n```json\n{plan_content}\n```"}
                ]
            }

            response = requests.post(
                "https://api.deepseek.com/chat/completions",
                headers={
                    "Authorization": f"Bearer {os.environ['DEEPSEEK_API_KEY']}",
                    "Content-Type": "application/json"
                },
                json=payload
            )
            response.raise_for_status()
            summary = response.json()['choices'][0]['message']['content']
            with open('plan_output/summary.txt', 'w') as f:
                f.write(summary)
          EOF

      - name: Comment Plan Summary in PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('plan_output/summary.txt', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `### 游뱄 Resumen del Plan de Terraform (v칤a DeepSeek)\n\n${summary}`
            })

      - name: Upload Plan Artifacts
        if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
        uses: actions/upload-artifact@v3
        with:
          name: terraform-plan-output
          path: plan_output/
          retention-days: 5
  
  terraform_apply:
    name: "Terraform Apply (Remote Execution via Terraform Cloud)"
    needs: terraform_plan
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download Plan Artifact
        uses: actions/download-artifact@v3
        with:
          name: terraform-plan-output
          path: plan_output/

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
          cli_config_credentials_token: ${{ secrets.TERRAFORM_CLOUD_TOKEN }}
      
      - name: Set Environment Variables
        run: |
          echo "TIMESTAMP=$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV
          echo "ENVIRONMENT=prod" >> $GITHUB_ENV
      
      - name: Create and Push Git Tag with Summary
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          TAG_NAME="deploy-${{ env.ENVIRONMENT }}-${{ env.TIMESTAMP }}"
          SUMMARY=$(head -c 1000 plan_output/summary.txt)
          echo "Resumen del despliegue de Terraform para el entorno '${{ env.ENVIRONMENT }}':" > tag_message.txt
          echo "" >> tag_message.txt
          echo "${SUMMARY}" >> tag_message.txt
          git tag -a "${TAG_NAME}" -F tag_message.txt
          git push origin "${TAG_NAME}"

      - name: Terraform Apply
        run: |
          terraform -chdir=terraform/environments/prod apply -input=false -auto-approve plan_output/plan.tfplan