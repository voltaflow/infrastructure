name: "Terraform CI/CD"

on:
  push:
    branches: [ main ]
    paths:
      - 'terraform/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'terraform/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

jobs:
  terraform_fmt:
    name: "Terraform Format"
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
      
      - name: Terraform Format
        id: fmt
        run: |
          cd $GITHUB_WORKSPACE
          terraform fmt -check -recursive ./terraform
      
      - name: Comment PR on Format Failure
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `#### Terraform Format Check üñå\n‚ùå Failed: Please run \`terraform fmt -recursive\` locally and commit the changes.`
            })
  
  terraform:
    name: "Terraform"
    needs: terraform_fmt
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
      
      - name: Terraform Init
        id: init
        run: terraform init
      
      - name: Terraform Validate
        id: validate
        run: terraform validate
      
      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
        env:
          TF_VAR_newrelic_api_key: ${{ secrets.NEWRELIC_API_KEY }}
        run: terraform plan -var-file=environments/${{ github.event.inputs.environment || 'dev' }}/terraform.tfvars -no-color
        continue-on-error: true
      
      - name: Update PR with Plan
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          script: |
            const output = `#### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome == 'success' && '‚úÖ Passed' || '‚ùå Failed' }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome == 'success' && '‚úÖ Passed' || '‚ùå Failed' }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome == 'success' && '‚úÖ Passed' || '‚ùå Failed' }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`terraform
            ${{ steps.plan.outputs.stdout }}
            \`\`\`
            
            </details>`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch'
        env:
          TF_VAR_newrelic_api_key: ${{ secrets.NEWRELIC_API_KEY }}
        run: terraform apply -var-file=environments/${{ github.event.inputs.environment }}/terraform.tfvars -auto-approve
